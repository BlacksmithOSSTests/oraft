#!/usr/bin/env ruby

require 'logger'
require 'parallel'
require 'faraday'

$logger = Logger.new(STDOUT)
$logger.level = Logger::DEBUG

class Error
  def initialize
    @last_ts = nil
    @count = 0
    @monitor = Monitor.new
  end

  def stalled?
    @monitor.synchronize do
      if @last_ts && Time.now - 2 < @last_ts
        if @count > 8
          return true
        end
      else
        @last_ts = nil
        @count = 0
      end
    end

    return false
  end

  def incr
    @monitor.synchronize do
      @last_ts = Time.now
      @count += 1
    end
  end

  def reset
    @monitor.synchronize do
      @last_ts = nil
      @count = 0
    end
  end
end

class Verifier
  RETRY = 32

  def initialize(concurrency, key_size, count, wait_ms)
    @concurrency = concurrency
    @key_size = key_size
    @count = count
    @wait_ms = wait_ms
    @clients = 1.upto(5).map do |i|
      Faraday.new("http://localhost:818#{i}", request: {
        open_timeout: 0.4,
        timeout: 0.8
      })
    end
    @errors = @clients.inject({}) {|a, x|
      a[x] = Error.new
      a
    }
    @expected_kvs = {}
  end

  def wait(init_wait, retry_factor, max_wait, retry_count)
    # Add plus/minus 10% jitter
    sleep([init_wait * (retry_factor ** retry_count), max_wait].min * (1.1 - Random.rand(0.2)))
  end

  def throw_exception(msg)
    ex = Exception.new(msg)
    $logger.error(ex)
    STDOUT.flush
    raise ex
  end

  def send_command(request_id, command, client = nil)
    RETRY.times.each do |i|
      client ||= @clients[Random.rand(5)]
      error = @errors[client] 
      if error.stalled?
        $logger.warn "[#{request_id}] This client may be stalled. Trying another one... client=#{client.url_prefix}, command='#{command}'"
        client = nil
        next
      end

      $logger.debug "[#{request_id}] client=#{client.url_prefix}, command='#{command}'"

      begin
        response = client.post("/command", command)
        error.reset
      rescue Faraday::ConnectionFailed, Faraday::TimeoutError
        $logger.warn "[#{request_id}] Network error: command='#{command}', exception=#{$!}"
        client = nil
        error.incr
        wait(0.1, 2, 1.5, i)
        next
      end

      case response.status
      when 0...200
        throw_exception("[#{request_id}] Unexpected response: response.status=#{response.status}, command='#{command}', error=#{response.body}")
      when 200...300
        $logger.debug "[#{request_id}] Success! command='#{command}'"
        return response.body
      when 400
        throw_exception("[#{request_id}] Bad Request: command='#{command}', error=#{response.body}")
      when 404
        throw_exception("#{request_id}] Not Found: command='#{command}', error=#{response.body}")
      when 409
        $logger.warn "[#{request_id}] Conflict: command='#{command}', error=#{response.body}"
        # Conflict
        return nil
      else # >= 500
        $logger.warn "[#{request_id}] Temporary error: response.status=#{response.status}, command='#{command}', error=#{response.body}"
        client = nil
        wait(0.1, 2, 1.5, i)
        next
      end
    end

    throw_exception("[#{request_id}] Retry over (HTTP response): command='#{command}'")
  end

  def key(i)
    "key-#{i % @key_size}"
  end

  def initialize_values
    @key_size.times.each do |i|
      k = key(i)
      send_command("set-#{i}", "SET #{k} 0")
      @expected_kvs[k] = 0
    end
  end

  def update_values
    Parallel.each(0...@count, :in_threads => @concurrency) do |i|
      sleep(@wait_ms / 1000.0)
      retry_count = 0
      loop do
        label = "update-#{i}-#{retry_count}"
        if retry_count >= RETRY
          throw_exception("[#{label}] Retry over (CAS): i='#{i}'")
        end

        k = key(i)
        v = send_command(label, "GET #{k}")
        diff = Random.rand(100000)
        next_v = Integer(v) + diff

        $logger.debug "[#{label}] diff=#{diff}"

        if send_command(label, "CAS #{k} #{v} #{next_v}") || Integer(send_command(label, "GET #{k}")) == next_v
          $logger.debug "[#{label}] updating #{k}: expected_kvs=#{@expected_kvs[k]}, next_v=#{next_v}"
          @expected_kvs[k] += diff
          $logger.debug "[#{label}] updated #{k}: expected_kvs=#{@expected_kvs[k]}, next_v=#{next_v}"
          break
        end

        wait(0.1, 2, 1.5, retry_count)
        retry_count += 1
      end
    end
  end

  def verify_values
    puts
    puts "================================================================================"
    puts "Result"
    puts "--------------------------------------------------------------------------------"
    failed = 0
    @key_size.times.each do |i|
      k = key(i)
      puts "Key: #{k}"
      expected = @expected_kvs[k]
      @clients.each_with_index do |client, j|
        v = Integer(send_command("verify-#{i}-#{j}", "GET #{k}", client))
        if v == expected
          puts "Success: expected=#{expected}, actual=#{v}"
        else
          puts "Failed:  expected=#{expected}, actual=#{v}"
          failed += 1
        end
      end
      puts "--------------------------------------------------------------------------------"
    end

    puts
    if failed == 0
      puts "All good"
      puts
      true
    else
      puts "Detected any failure: failed_count=#{failed}"
      puts
      false
    end
  end

  def run
    initialize_values

    update_values

    verify_values
  end
end

if $0 == __FILE__
  if Verifier.new(8, 16, 4096, 200).run
    exit 0
  else
    exit 1
  end
end

